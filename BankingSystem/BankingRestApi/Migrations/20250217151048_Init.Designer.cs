// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BankingRestApi.Migrations
{
    [DbContext(typeof(DataAccessContext))]
    [Migration("20250217151048_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Concretes.Agent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Descriptionn")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TransactionMethod")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Agents", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Concretes.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("Domain.Entities.Concretes.Transactions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountDestinationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountOriginId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.Concretes.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Concretes.ATM", b =>
                {
                    b.HasBaseType("Domain.Entities.Concretes.Agent");

                    b.Property<int>("CurrentBalance")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("ATMs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e299ef2-b03d-4625-9b2e-62da2939fbe5"),
                            IsActive = true,
                            RegisteredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionMethod = 0,
                            CurrentBalance = 5600,
                            Location = "Main Street 123"
                        },
                        new
                        {
                            Id = new Guid("8f9e1a54-71b7-48c0-ab6c-02776f89d03e"),
                            IsActive = true,
                            RegisteredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionMethod = 0,
                            CurrentBalance = 6700,
                            Location = "Central Park"
                        },
                        new
                        {
                            Id = new Guid("dce5217d-3390-4c28-9625-844d06c05e44"),
                            IsActive = true,
                            RegisteredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionMethod = 0,
                            CurrentBalance = 9000,
                            Location = "Airport Terminal"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Concretes.WebPlatform", b =>
                {
                    b.HasBaseType("Domain.Entities.Concretes.Agent");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("WebPlatforms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd8177dc-9d5e-434b-a97b-20c68a608596"),
                            IsActive = true,
                            RegisteredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionMethod = 1,
                            Address = "https://bank.example.com",
                            Name = "WebPlatform"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Concretes.BankAccount", b =>
                {
                    b.HasOne("Domain.Entities.Concretes.User", "User")
                        .WithMany("BankAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Concretes.Transactions", b =>
                {
                    b.HasOne("Domain.Entities.Concretes.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Domain.Entities.Concretes.ATM", b =>
                {
                    b.HasOne("Domain.Entities.Concretes.Agent", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Concretes.ATM", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Concretes.WebPlatform", b =>
                {
                    b.HasOne("Domain.Entities.Concretes.Agent", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Concretes.WebPlatform", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Concretes.User", b =>
                {
                    b.Navigation("BankAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
